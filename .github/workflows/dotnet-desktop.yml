name: .NET Core Desktop

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Solution_Name: MyApp.sln
      Test_Project_Path: MyApp.Tests\MyApp.Tests.csproj
      Wap_Project_Directory: MyApp.Package
      Wap_Project_Path: MyApp.Package\MyApp.Package.wapproj

    steps:
    - name: ‚è¨ Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: ‚öôÔ∏è Install .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: üõ†Ô∏è Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: üì¶ Restore NuGet packages
      run: dotnet restore ${{ env.Solution_Name }}

    - name: üîß Build solution - ${{ matrix.configuration }}
      run: msbuild $env:Solution_Name /p:Configuration=${{ matrix.configuration }}

    - name: üß™ Run unit tests
      run: dotnet test ${{ env.Test_Project_Path }} --configuration ${{ matrix.configuration }}

    - name: üîê Decode the PFX certificate
      run: |
        if ("${{ secrets.Base64_Encoded_Pfx }}" -ne "") {
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
          $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
          [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
        } else {
          Write-Host "‚ö†Ô∏è Base64_Encoded_Pfx secret is not set."
        }

    - name: üì¶ Package the app (MSIX)
      run: |
        msbuild $env:Wap_Project_Path `
          /p:Configuration=${{ matrix.configuration }} `
          /p:UapAppxPackageBuildMode=StoreUpload `
          /p:AppxBundle=Always `
          /p:AppxBundlePlatforms="x86|x64" `
          /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx `
          /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}

    - name: üßπ Clean up certificate
      run: Remove-Item -Path "$env:Wap_Project_Directory\GitHubActionsWorkflow.pfx"

    - name: üì§ Upload MSIX artifacts
      uses: actions/upload-artifact@v4
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
